image: docker:24.0.5

services:
  - name: docker:24.0.5-dind
    command: ["--insecure-registry=$REGISTRY_URL"]
  # Uwaga: dind wymaga `privileged = true` w konfiguracji runnera

variables:
  IMAGE: myapp:$CI_COMMIT_SHA
  DOCKER_TLS_CERTDIR: ""  # wymagane by uniknąć problemów z TLS w dind

stages:
  - build
  - test

before_script:
  - docker info
  - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASS" "$REGISTRY_URL"

build:
  stage: build
  script:
    - docker image build --tag $IMAGE --tag myapp:latest .
    - docker image build --no-cache --build-arg token=$SCANNER_TOKEN --tag myapp:ci -f Dockerfile.ci .
    - docker tag $IMAGE $REGISTRY_URL/myapp:$CI_COMMIT_SHA
    - docker tag myapp:latest $REGISTRY_URL/myapp:latest
    - docker push $REGISTRY_URL/myapp:$CI_COMMIT_SHA
    - docker push $REGISTRY_URL/myapp:latest

trivy:
  stage: test
  image: docker:24.0.5
  services:
    - name: docker:dind
  before_script:
    - apk add --no-cache curl wget tar
    - export VERSION=$(curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - wget https://github.com/aquasecurity/trivy/releases/download/v${VERSION}/trivy_${VERSION}_Linux-64bit.tar.gz
    - tar zxvf trivy_${VERSION}_Linux-64bit.tar.gz
  allow_failure: true  # raport nie blokuje CI, ale loguje
  script:
    - ./trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --format template --template "@contrib/gitlab.tpl" -o gl-container-scanning-report.json $IMAGE
    - ./trivy image --exit-code 0 --cache-dir .trivycache/ --no-progress --severity HIGH $IMAGE
    - ./trivy image --exit-code 1 --cache-dir .trivycache/ --no-progress --ignorefile .trivyignore --severity CRITICAL $IMAGE
  cache:
    paths:
      - .trivycache/
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json

